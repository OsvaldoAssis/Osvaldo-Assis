Documentação do Aplicativo de Simulação de Estruturas de Dados
Este documento tem como objetivo fornecer uma explicação detalhada sobre o funcionamento e o uso da aplicação de simulação de estruturas de dados desenvolvida. A aplicação permite simular e visualizar graficamente três estruturas de dados diferentes: Fila, Lista Ligada e Grafo.

Funcionamento da Aplicação
A aplicação utiliza HTML, CSS e JavaScript para criar uma interface gráfica interativa onde os usuários podem realizar as seguintes operações:

Simular Fila:

Visualiza uma fila com até 6 elementos.
Operações disponíveis: adicionar na fila, remover da fila.
Simular Lista Ligada:

Visualiza uma lista ligada com até 7 elementos.
Operações disponíveis: adicionar na lista ligada (no final), remover da lista ligada (do início).
Simular Grafo:

Visualiza um grafo com nós e arestas.
Operações disponíveis: adicionar nó, adicionar aresta, remover aresta.
Estruturas de Dados Implementadas
Fila: Implementada como um array com tamanho máximo de 6 elementos.
Lista Ligada: Implementada como uma lista encadeada simples com tamanho máximo de 7 elementos.
Grafo: Implementado usando a biblioteca D3.js para manipulação e visualização de nós e arestas.
Como Manusear a Aplicação
Para utilizar a aplicação, siga os passos abaixo:

Abrir a Aplicação:

Certifique-se de ter os arquivos index.html, styles.css e script.js no mesmo diretório.
Abra o arquivo index.html em um navegador web (Chrome, Firefox, etc.).
Operações Disponíveis:

Fila:

Clique em "Simular Fila" para visualizar a fila.
Use "Adicionar na Fila" para adicionar um elemento (insere no final).
Use "Remover da Fila" para remover o primeiro elemento da fila.
Lista Ligada:

Clique em "Simular Lista Ligada" para visualizar a lista ligada.
Use "Adicionar na Lista Ligada" para adicionar um elemento (insere no final).
Use "Remover da Lista Ligada" para remover o primeiro elemento da lista ligada.
Grafo:

Clique em "Simular Grafo" para visualizar o grafo.
Use "Adicionar Nó" para adicionar um novo nó ao grafo.
Use "Adicionar Aresta" para adicionar uma aresta entre dois nós existentes (digite os IDs dos nós quando solicitado).
Use "Remover Aresta" para remover uma aresta existente (digite os IDs dos nós que formam a aresta quando solicitado).
Visualização Gráfica:

Cada estrutura de dados é visualizada graficamente na área designada na página HTML.
A fila e a lista ligada são representadas como elementos textuais.
O grafo é visualizado usando a biblioteca D3.js, onde os nós são representados como círculos e as arestas como linhas.
Interatividade:

Na simulação do grafo, você pode arrastar os nós para reposicioná-los.
A adição e remoção de elementos nas estruturas de dados são refletidas instantaneamente na visualização gráfica correspondente.
Considerações Finais
A aplicação foi desenvolvida para ser simples e educativa, permitindo aos usuários experimentar visualmente o comportamento das estruturas de dados.
Certifique-se de usar IDs válidos ao adicionar ou remover arestas no grafo para evitar erros.
Caso ocorram erros ou problemas inesperados, verifique o console do navegador para mensagens de erro que possam ajudar na depuração.
Este documento fornece uma visão geral clara do funcionamento da aplicação e orientações sobre como usar suas funcionalidades para explorar as estruturas de dados implementadas.

Vamos explicar como adicionar e remover elementos nas três estruturas de dados implementadas na aplicação: Fila, Lista Ligada e Grafo. Cada uma dessas estruturas possui suas próprias operações específicas de adição e remoção de elementos.

1. Fila
A fila é uma estrutura de dados do tipo FIFO (First-In-First-Out), onde o primeiro elemento adicionado é o primeiro a ser removido.

Adicionar na Fila:

Para adicionar um elemento à fila, você insere o novo elemento no final da fila.
No código JavaScript, isso é feito usando um array com um tamanho máximo predefinido (no caso da nossa implementação, até 6 elementos).
Exemplo de implementação:

javascript
Copiar código
function addToQueue(value) {
    if (queue.length < 6) { // Verifica se a fila não está cheia
        queue.push(value); // Adiciona o valor ao final da fila
        visualizeQueue(); // Atualiza a visualização da fila na interface gráfica
    } else {
        alert("A fila está cheia! Não é possível adicionar mais elementos.");
    }
}
Remover da Fila:

Para remover um elemento da fila, você remove o elemento que está no início da fila (primeiro elemento adicionado).
Exemplo de implementação:

javascript
Copiar código
function removeFromQueue() {
    if (queue.length > 0) { // Verifica se a fila não está vazia
        queue.shift(); // Remove o primeiro elemento da fila
        visualizeQueue(); // Atualiza a visualização da fila na interface gráfica
    } else {
        alert("A fila está vazia! Não há elementos para remover.");
    }
}
2. Lista Ligada
A lista ligada é uma estrutura de dados onde cada elemento (nó) armazena o valor do dado e um ponteiro (referência) para o próximo nó na lista.

Adicionar na Lista Ligada:

Para adicionar um elemento à lista ligada, você pode inserir no final da lista ou em qualquer posição desejada, dependendo da implementação.
Exemplo de implementação simples no final da lista:

javascript
Copiar código
function addToLinkedList(value) {
    if (linkedList.length < 7) { // Verifica se a lista ligada não está cheia
        linkedList.addToEnd(value); // Adiciona o valor ao final da lista ligada
        visualizeLinkedList(); // Atualiza a visualização da lista ligada na interface gráfica
    } else {
        alert("A lista ligada está cheia! Não é possível adicionar mais elementos.");
    }
}
Remover da Lista Ligada:

Para remover um elemento da lista ligada, você pode remover do início, do final ou de qualquer posição desejada, dependendo da implementação.
Exemplo de implementação simples do início da lista:

javascript
Copiar código
function removeFromLinkedList() {
    if (linkedList.length > 0) { // Verifica se a lista ligada não está vazia
        linkedList.removeFromStart(); // Remove o primeiro elemento da lista ligada
        visualizeLinkedList(); // Atualiza a visualização da lista ligada na interface gráfica
    } else {
        alert("A lista ligada está vazia! Não há elementos para remover.");
    }
}
3. Grafo
Um grafo é uma estrutura de dados composta por um conjunto de nós (vértices) e um conjunto de arestas que conectam pares de nós.

Adicionar Nó no Grafo:

Para adicionar um nó ao grafo, você simplesmente adiciona um novo objeto nó ao array de nós (nodes).
Exemplo de implementação:

javascript
Copiar código
function addNode() {
    const newNodeId = nodes.length + 1; // Gera um novo ID para o nó
    nodes.push({ id: newNodeId }); // Adiciona o novo nó ao array de nós
    visualizeGraph(nodes, links); // Atualiza a visualização do grafo na interface gráfica
}
Adicionar Aresta no Grafo:

Para adicionar uma aresta (conexão) entre dois nós no grafo, você adiciona um objeto aresta ao array de arestas (links), especificando os nós de origem e destino.
Exemplo de implementação:

javascript
Copiar código
function addEdge() {
    // Lógica para escolher os nós de origem e destino (pode ser aleatório ou selecionado pelo usuário)
    // Aqui você precisa garantir que os IDs dos nós existam e que a aresta não seja duplicada
    // Exemplo simplificado:
    const randomNode1 = Math.floor(Math.random() * nodes.length) + 1;
    let randomNode2 = Math.floor(Math.random() * nodes.length) + 1;
    while (randomNode2 === randomNode1) {
        randomNode2 = Math.floor(Math.random() * nodes.length) + 1;
    }

    // Adiciona a nova aresta ao array de links
    links.push({ source: randomNode1, target: randomNode2 });
    visualizeGraph(nodes, links); // Atualiza a visualização do grafo na interface gráfica
}
Remover Aresta do Grafo:

Para remover uma aresta do grafo, você remove um objeto aresta do array de arestas (links).
Exemplo de implementação:

javascript
Copiar código
function removeEdge() {
    // Lógica para selecionar a aresta a ser removida (pode ser feito com base em algum critério)
    // Aqui você precisa garantir que a aresta exista antes de removê-la
    // Exemplo simplificado: remove a última aresta adicionada
    if (links.length > 0) {
        links.pop(); // Remove a última aresta do array de links
        visualizeGraph(nodes, links); // Atualiza a visualização do grafo na interface gráfica
    } else {
        alert("O grafo não tem arestas para remover!");
    }
}
Considerações Finais
Cada operação de adicionar ou remover elementos nas estruturas de dados é refletida na visualização gráfica correspondente na interface da aplicação.
A interface gráfica é atualizada imediatamente após cada operação, proporcionando uma experiência interativa ao usuário.
As implementações apresentadas são exemplos simplificados. Dependendo dos requisitos específicos do projeto, as funções podem ser ajustadas para lidar com validações adicionais, tratamento de erros e outros cenários específicos.
Com essas explicações, você deve estar apto a entender como as operações de adicionar e remover elementos são realizadas nas estruturas de dados implementadas na aplicação.